const { SortParameter, decodeTransactions } = require('app-store-server-api');
const { api } = require('./api');
const { areAllDefined } = require('../validate/validateDefined');
const { logServerError } = require('../logging/logServerError');
const { formatString, formatBoolean } = require('../format/formatObject');

/**
 * Queries Apple Store Server API with the transactionId to get all records of transactions associated with that transactionId. DESC from most recently to oldest.
 * https://github.com/agisboye/app-store-server-api
 * @param {*} transactionId The transactionId used to query Apple's servers to find linked transactions.
 * @returns An array of decodedTransactions linked to transactionId or null
 */
async function queryTransactionsFromAppStoreServerAPI(transactionId) {
  return queryTransactionsFromAppStoreServerAPIWithPreviousResponse(transactionId, null);
}

/**
 * Internal function.
 * We don't expose previousResponse to outside this file, as it's value is generated by this functions body.
 * Queries Apple Store Server API with the transactionId to get all records of transactions associated with that transactionId. DESC from most recently to oldest.
 * https://github.com/agisboye/app-store-server-api
 * @param {*} transactionId The transactionId used to query Apple's servers to find linked transactions.
 * @param {*} previousResponse The previousResponse from a previous invocation of queryTransactionsFromAppStoreServerAPI, used internally for response.hasMore
 * @returns An array of decodedTransactions linked to transactionId or null
 */
async function queryTransactionsFromAppStoreServerAPIWithPreviousResponse(transactionId, previousResponse) {
  // TODO NOW TEST this function
  if (areAllDefined(transactionId) === false) {
    return null;
  }

  // Query Apple's servers to attempt to get the transaction history linked to a transactionId from an AppStoreReceiptURL
  let response;
  const queryProperties = areAllDefined(previousResponse) && areAllDefined(previousResponse.revision)
    ? {
      sort: SortParameter.Descending,
      // must be undefined, not null
      revision: previousResponse.revision,
    }
    : { sort: SortParameter.Descending };
  try {
    response = await api.getTransactionHistory(transactionId, queryProperties);
  }
  catch (error) {
    logServerError('queryTransactionsFromAppStoreServerAPIWithPreviousResponse getTransactionHistory', error);
    return null;
  }

  if (formatString(response.bundleId) !== global.CONSTANT.SERVER.APP_BUNDLE_ID) {
    return null;
  }

  if (formatString(response.environment) !== global.CONSTANT.SERVER.ENVIRONMENT) {
    return null;
  }

  // Decoding not only reveals the contents of the transactions but also verifies that they were signed by Apple.
  let transactions;
  try {
    transactions = await decodeTransactions(response.signedTransactions);
  }
  catch (error) {
    logServerError('queryTransactionsFromAppStoreServerAPIWithPreviousResponse decodeTransactions', error);
    return null;
  }

  // The response contains at most 20 entries. You can check to see if there are more.
  if (formatBoolean(response.hasMore) === true) {
    const nextTransactions = await queryTransactionsFromAppStoreServerAPIWithPreviousResponse(transactionId, response);
    return transactions.concat(areAllDefined(nextTransactions) ? nextTransactions : []);
  }

  return transactions;
}

module.exports = { queryTransactionsFromAppStoreServerAPI };
